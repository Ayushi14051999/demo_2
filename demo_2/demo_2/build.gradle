/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id "org.springdoc.openapi-gradle-plugin" version "1.7.0"
    id "jacoco-report-aggregation"
    id "me.qoomon.git-versioning" version "6.4.2"
    
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.4.7'
	implementation 'org.springframework.boot:spring-boot-starter-web:2.7.4'
	// https://mvnrepository.com/artifact/org.postgresql/postgresql
	implementation 'org.postgresql:postgresql:42.2.27'

	implementation 'org.hibernate:hibernate-core:5.6.1.Final'
	implementation "org.springdoc:springdoc-openapi-ui:1.7.0"
	implementation 'org.springframework:spring-webmvc:5.3.22'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.7.0'

    // JUnit 5
 

    // JUnit 5 Vintage for running JUnit 4 tests in JUnit 5 (Optional)
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.9.1'

    // Mockito Core
    testImplementation 'org.mockito:mockito-core:3.9.0'

    // Spring Web MVC (Assuming you're using Spring Boot)
    //implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux:2.5.15'

	testImplementation "org.springframework.boot:spring-boot-starter-test:2.7.4"
	
//    runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.3.5.RELEASE'

}
openApi {
    apiDocsUrl.set("http://localhost:8080/v3/api-docs")
    outputDir.set(file("docs"))
    outputFileName.set("openapi.json")
    waitTimeInSeconds.set(20)
    
    customBootRun {
        args.set(["--spring.profiles.active=special"]) 
    }
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
gitVersioning.apply {
    refs {
        tag('v(?<version>.*)') {
            version = 'v${ref.version}'
        }
    }

    // optional fallback configuration in case of no matching ref configuration
    rev {
        version = '${commit}'
    }
// Access the version value from the git-versioning plugin
	def gitVersion = project.extensions.findByType(me.qoomon.gradle.gitversioning.GitVersioningPluginExtension)

	// Check if the git-versioning plugin is applied
	if (gitVersion != null) {
	    // Access the version value from the plugin
	    def version = gitVersion

	    // Now, 'version' contains the extracted version value
	    println "The extracted version is: $version"
	} else {
	    // Handle the case when the git-versioning plugin is not applied
	    println "The git-versioning plugin is not applied."
	}
}


description = 'demo_2'
java.sourceCompatibility = JavaVersion.VERSION_15

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}
sourceSets {
    test {
        java.srcDirs = ['src/test/java']
    }
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
tasks.named('test', Test) {
    useJUnitPlatform()

    maxHeapSize = '1G'

    testLogging {
        events "passed"
    }
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
